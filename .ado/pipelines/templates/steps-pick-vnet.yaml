parameters:
  prefix:                    ''
  suffix:                    ''

steps:
- task: AzureCLI@2
  displayName: 'Select or create VNets if not exists'
  inputs:
    azureSubscription: '$(azureServiceConnection)'
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |

      $prefix = "${{ parameters.prefix }}"
      $suffix = "${{ parameters.suffix }}"

      # Hashtable of VNet IDs per stamp location
      $vnets = @{}
      $stampLocations = '$(stampLocations)' | ConvertFrom-Json -NoEnumerate

      $vnetFile = "$(System.DefaultWorkingDirectory)/.ado/pipelines/config/vnets-$(environment).json"

      if(Test-Path $vnetFile)
      {
        echo "*** Using provided VNets from file $vnetFile"

        # Load available pre-provided VNets
        $availableVnets = Get-Content $vnetFile | ConvertFrom-JSON

        foreach($location in $stampLocations)
        {
          # Pick list of regional VNets
          $vnetsInLocation = $availableVnets.$location
          if(-not $vnetsInLocation)
          {
            throw "*** ERROR: List of VNets in $vnetFile does not contain desired stamp region $location"
          }

          foreach($vnetId in $vnetsInLocation)
          {
            echo "*** Checking if VNet is in use $vnetId"
            $vnet = az network vnet show --ids $vnetId | ConvertFrom-Json
            if(-not $vnet)
            {
              throw "*** ERROR $vnetId not found"
            }

            $earmarkTagName = "alwayson-vnet-used-by"

            if($vnet.tags.$earmarkTagName -eq "$prefix$suffix")
            {
              # Use this VNet as it was already tagged for this release
              echo "*** VNet $($vnet.name) was already used before be this same deployment. Will use this VNet again"
              $vnets[$location] = $vnetId

              break
            }
            else if(($vnet.subnets.Count) -eq 0 -and (-not $vnet.tags.$earmarkTagName))
            {
              # Use this VNet as it has no subnets yet and was not earmarked yet by any other release
              echo "*** VNet $($vnet.name) has no subnets. Will use this VNet"
              $vnets[$location] = $vnetId

              # Add a tag to mark this VNet being used by this deployment
              az tag update --operation merge --resource-id $vnetId --tags "$earmarkTagName=$prefix$suffix"

              break
            }
          }

          if(-not $vnets[$location])
          {
            throw "*** ERROR no available VNet found for location $location"
          }
        }
      }
      else
      {
        echo "*** No pre-provided VNets defined (file not found: $vnetFile). Using temporary VNets..."
        # This is usually the case for E2E: we do not have pre-provided VNets here, so we need to create them first

        $rgName = "$prefix$suffix-networks-rg"

        # This can be adjusted as needed
        $addressSpace = "10.1.0.0/18"

        foreach($location in $stampLocations)
        {

          $vnetName = "$prefix$suffix-$location-vnet"

          # check if the VNet already exists (from a previous run of this job)
          $vnet = az network vnet list --query "[?name=='$vnetName']" | ConvertFrom-JSON

          if($LastExitCode -ne 0)
          {
              throw "*** Error on checking existing VNet $vnetName"
          }

          if($vnet)
          {
            echo "*** VNEt $vnetName already exists"
            $vnets[$location] = $vnet.id
          }
          else
          {
            echo "*** Check if Resource Group $rgName exists"
            $checkRg = az group exists --name $rgName | ConvertFrom-Json
            if (!$checkRg) {
              Write-Warning "*** Resource Group $rgName does not exist. Creating..."
              # get the stamp locations and use the first one to create the resource group there.
              az group create --name $rgName --location $location

              if ($LASTEXITCODE -eq 1) {
                Write-Error "*** Error - could not create resource group"
              }
            }

            echo "*** Creating new VNet $vnetName for E2E environment..."
            $vnet = $(az network vnet create -n $vnetName -g $rgName -l $location --address-prefixes $addressSpace) | ConvertFrom-JSON
            $vnets[$location] = $vnet.newVnet.id
          }
        }
      }

      $vnetsJson = $vnets | ConvertTo-Json -Compress

      echo "*** List of VNets per location: $vnetsJson"

      # Write map of VNet Resource IDs per stamp location which when then be used for Terraform input
      echo "##vso[task.setvariable variable=tfParameterVnetResourceIds]$vnetsJson"